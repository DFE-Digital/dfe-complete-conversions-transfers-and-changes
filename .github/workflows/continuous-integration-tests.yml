name: Continuous Integration / Application

on:
  pull_request:
  push:
    branches:
      - main
      - develop

jobs:
  accessibility-checks:
    name: Accessibility checks
    runs-on: ubuntu-latest

    env:
      RAILS_ENV: test

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - id: cache-docker
        uses: actions/cache@v3
        with:
          path: /tmp/docker-save
          key:
            docker-save-${{ hashFiles('Dockerfile', 'Gemfile.lock',
            'package-lock.json') }}

      - if: steps.cache-docker.outputs.cache-hit == 'true'
        name: Load cached Docker image
        run: docker load -i /tmp/docker-save/snapshot.tar || true

      - name: Build
        run: script/ci/cibuild

      - name: Run checks
        run: script/ci/accessibility

      - if: always() && steps.cache-docker.outputs.cache-hit != 'true'
        name: Prepare Docker cache
        run:
          mkdir -p /tmp/docker-save && docker save app_test:latest -o
          /tmp/docker-save/snapshot.tar && ls -lh /tmp/docker-save

  linting-and-formatting:
    name: Linting and formatting
    runs-on: ubuntu-latest

    env:
      RAILS_ENV: test
      ONLY_LINTING: "true"
      BUNDLE_ONLY: "linting"

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - uses: ruby/setup-ruby@v1
      - uses: actions/setup-node@v3

      - name: Test
        run: script/no-docker/test

  application:
    name: Specs
    runs-on: ubuntu-latest

    env:
      RAILS_ENV: test
      ONLY_APP_TESTS: "true"

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Create coverage directory
        run: mkdir coverage

      - id: cache-docker
        uses: actions/cache@v3
        with:
          path: /tmp/docker-save
          key:
            docker-save-${{ hashFiles('Dockerfile', 'Gemfile.lock',
            'package-lock.json') }}

      - if: steps.cache-docker.outputs.cache-hit == 'true'
        name: Load cached Docker image
        run: docker load -i /tmp/docker-save/snapshot.tar || true

      - name: Build image
        run: script/ci/cibuild

      - name: Run specs
        run: script/ci/test

      - name: Debug
        run: echo $(pwd)

      - name: Debug
        run: ls ./

      - name: Debug
        run: ls ./app

      - name: Debug
        run: cat ./coverage/coverage.json

      - name: Update coverage paths
        run: sed "s|/srv/app|/opt|g" -i ./coverage/coverage.json

      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - if: always() && steps.cache-docker.outputs.cache-hit != 'true'
        name: Prepare Docker cache
        run:
          mkdir -p /tmp/docker-save && docker save app_test:latest -o
          /tmp/docker-save/snapshot.tar && ls -lh /tmp/docker-save
